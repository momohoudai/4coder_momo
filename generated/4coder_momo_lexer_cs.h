#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Cs_Kind;
enum{
TokenCsKind_EOF = 0,
TokenCsKind_Whitespace = 1,
TokenCsKind_LexError = 2,
TokenCsKind_BlockComment = 3,
TokenCsKind_LineComment = 4,
TokenCsKind_Backslash = 5,
TokenCsKind_LiteralInteger = 6,
TokenCsKind_LiteralIntegerU = 7,
TokenCsKind_LiteralIntegerL = 8,
TokenCsKind_LiteralIntegerUL = 9,
TokenCsKind_LiteralIntegerLL = 10,
TokenCsKind_LiteralIntegerULL = 11,
TokenCsKind_LiteralIntegerHex = 12,
TokenCsKind_LiteralIntegerHexU = 13,
TokenCsKind_LiteralIntegerHexL = 14,
TokenCsKind_LiteralIntegerHexUL = 15,
TokenCsKind_LiteralIntegerHexLL = 16,
TokenCsKind_LiteralIntegerHexULL = 17,
TokenCsKind_LiteralIntegerOct = 18,
TokenCsKind_LiteralIntegerOctU = 19,
TokenCsKind_LiteralIntegerOctL = 20,
TokenCsKind_LiteralIntegerOctUL = 21,
TokenCsKind_LiteralIntegerOctLL = 22,
TokenCsKind_LiteralIntegerOctULL = 23,
TokenCsKind_LiteralFloat32 = 24,
TokenCsKind_LiteralFloat64 = 25,
TokenCsKind_LiteralString = 26,
TokenCsKind_LiteralStringWide = 27,
TokenCsKind_LiteralStringUTF8 = 28,
TokenCsKind_LiteralStringUTF16 = 29,
TokenCsKind_LiteralStringUTF32 = 30,
TokenCsKind_LiteralStringRaw = 31,
TokenCsKind_LiteralStringWideRaw = 32,
TokenCsKind_LiteralStringUTF8Raw = 33,
TokenCsKind_LiteralStringUTF16Raw = 34,
TokenCsKind_LiteralStringUTF32Raw = 35,
TokenCsKind_LiteralCharacter = 36,
TokenCsKind_LiteralCharacterWide = 37,
TokenCsKind_LiteralCharacterUTF8 = 38,
TokenCsKind_LiteralCharacterUTF16 = 39,
TokenCsKind_LiteralCharacterUTF32 = 40,
TokenCsKind_PPIncludeFile = 41,
TokenCsKind_PPErrorMessage = 42,
TokenCsKind_KeywordGeneric = 43,
TokenCsKind_BraceOp = 44,
TokenCsKind_BraceCl = 45,
TokenCsKind_ParenOp = 46,
TokenCsKind_BrackOp = 47,
TokenCsKind_ParenCl = 48,
TokenCsKind_BrackCl = 49,
TokenCsKind_Semicolon = 50,
TokenCsKind_Colon = 51,
TokenCsKind_DotDotDot = 52,
TokenCsKind_ColonColon = 53,
TokenCsKind_PlusPlus = 54,
TokenCsKind_MinusMinus = 55,
TokenCsKind_Dot = 56,
TokenCsKind_Plus = 57,
TokenCsKind_Minus = 58,
TokenCsKind_Not = 59,
TokenCsKind_Tilde = 60,
TokenCsKind_Star = 61,
TokenCsKind_And = 62,
TokenCsKind_Div = 63,
TokenCsKind_Mod = 64,
TokenCsKind_LeftLeft = 65,
TokenCsKind_RightRight = 66,
TokenCsKind_Less = 67,
TokenCsKind_LessEq = 68,
TokenCsKind_Grtr = 69,
TokenCsKind_GrtrEq = 70,
TokenCsKind_EqEq = 71,
TokenCsKind_NotEq = 72,
TokenCsKind_Xor = 73,
TokenCsKind_Or = 74,
TokenCsKind_AndAnd = 75,
TokenCsKind_OrOr = 76,
TokenCsKind_Ternary = 77,
TokenCsKind_Eq = 78,
TokenCsKind_PlusEq = 79,
TokenCsKind_MinusEq = 80,
TokenCsKind_StarEq = 81,
TokenCsKind_DivEq = 82,
TokenCsKind_ModEq = 83,
TokenCsKind_LeftLeftEq = 84,
TokenCsKind_RightRightEq = 85,
TokenCsKind_Comma = 86,
TokenCsKind_PPStringify = 87,
TokenCsKind_PPConcat = 88,
TokenCsKind_Void = 89,
TokenCsKind_Delegate = 90,
TokenCsKind_Event = 91,
TokenCsKind_Bool = 92,
TokenCsKind_Uint = 93,
TokenCsKind_String = 94,
TokenCsKind_Char = 95,
TokenCsKind_Int = 96,
TokenCsKind_Float = 97,
TokenCsKind_Double = 98,
TokenCsKind_Long = 99,
TokenCsKind_Short = 100,
TokenCsKind_Const = 101,
TokenCsKind_Final = 102,
TokenCsKind_Break = 103,
TokenCsKind_Case = 104,
TokenCsKind_Catch = 105,
TokenCsKind_Continue = 106,
TokenCsKind_Default = 107,
TokenCsKind_Do = 108,
TokenCsKind_Else = 109,
TokenCsKind_For = 110,
TokenCsKind_Goto = 111,
TokenCsKind_If = 112,
TokenCsKind_Return = 113,
TokenCsKind_Switch = 114,
TokenCsKind_Try = 115,
TokenCsKind_While = 116,
TokenCsKind_Is = 117,
TokenCsKind_As = 118,
TokenCsKind_Class = 119,
TokenCsKind_Enum = 120,
TokenCsKind_Struct = 121,
TokenCsKind_Partial = 122,
TokenCsKind_Namespace = 123,
TokenCsKind_Private = 124,
TokenCsKind_Protected = 125,
TokenCsKind_Public = 126,
TokenCsKind_Using = 127,
TokenCsKind_Static = 128,
TokenCsKind_Virtual = 129,
TokenCsKind_Override = 130,
TokenCsKind_Null = 131,
TokenCsKind_Operator = 132,
TokenCsKind_This = 133,
TokenCsKind_Base = 134,
TokenCsKind_New = 135,
TokenCsKind_Var = 136,
TokenCsKind_LiteralTrue = 137,
TokenCsKind_LiteralFalse = 138,
TokenCsKind_Identifier = 139,
TokenCsKind_PPInclude = 140,
TokenCsKind_PPVersion = 141,
TokenCsKind_PPDefine = 142,
TokenCsKind_PPUndef = 143,
TokenCsKind_PPIf = 144,
TokenCsKind_PPIfDef = 145,
TokenCsKind_PPIfNDef = 146,
TokenCsKind_PPElse = 147,
TokenCsKind_PPElIf = 148,
TokenCsKind_PPEndIf = 149,
TokenCsKind_PPError = 150,
TokenCsKind_PPImport = 151,
TokenCsKind_PPUsing = 152,
TokenCsKind_PPLine = 153,
TokenCsKind_PPPragma = 154,
TokenCsKind_PPUnknown = 155,
TokenCsKind_PPDefined = 156,
TokenCsKind_COUNT = 157,
};
char *token_cs_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Colon",
"DotDotDot",
"ColonColon",
"PlusPlus",
"MinusMinus",
"Dot",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"Div",
"Mod",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"PPStringify",
"PPConcat",
"Void",
"Delegate",
"Event",
"Bool",
"Uint",
"String",
"Char",
"Int",
"Float",
"Double",
"Long",
"Short",
"Const",
"Final",
"Break",
"Case",
"Catch",
"Continue",
"Default",
"Do",
"Else",
"For",
"Goto",
"If",
"Return",
"Switch",
"Try",
"While",
"Is",
"As",
"Class",
"Enum",
"Struct",
"Partial",
"Namespace",
"Private",
"Protected",
"Public",
"Using",
"Static",
"Virtual",
"Override",
"Null",
"Operator",
"This",
"Base",
"New",
"Var",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIf",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPImport",
"PPUsing",
"PPLine",
"PPPragma",
"PPUnknown",
"PPDefined",
};
