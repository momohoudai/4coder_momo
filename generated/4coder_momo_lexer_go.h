#if !defined(FCODER_LEX_GEN_HAND_WRITTEN_TYPES)
#define FCODER_LEX_GEN_HAND_WRITTEN_TYPES

struct Lexeme_Table_Value{
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

struct Lexeme_Table_Lookup{
    b32 found_match;
    Token_Base_Kind base_kind;
    u16 sub_kind;
};

#endif
typedef u16 Token_Go_Kind;
enum{
TokenGoKind_EOF = 0,
TokenGoKind_Whitespace = 1,
TokenGoKind_LexError = 2,
TokenGoKind_BlockComment = 3,
TokenGoKind_LineComment = 4,
TokenGoKind_Backslash = 5,
TokenGoKind_LiteralInteger = 6,
TokenGoKind_LiteralIntegerU = 7,
TokenGoKind_LiteralIntegerL = 8,
TokenGoKind_LiteralIntegerUL = 9,
TokenGoKind_LiteralIntegerLL = 10,
TokenGoKind_LiteralIntegerULL = 11,
TokenGoKind_LiteralIntegerHex = 12,
TokenGoKind_LiteralIntegerHexU = 13,
TokenGoKind_LiteralIntegerHexL = 14,
TokenGoKind_LiteralIntegerHexUL = 15,
TokenGoKind_LiteralIntegerHexLL = 16,
TokenGoKind_LiteralIntegerHexULL = 17,
TokenGoKind_LiteralIntegerOct = 18,
TokenGoKind_LiteralIntegerOctU = 19,
TokenGoKind_LiteralIntegerOctL = 20,
TokenGoKind_LiteralIntegerOctUL = 21,
TokenGoKind_LiteralIntegerOctLL = 22,
TokenGoKind_LiteralIntegerOctULL = 23,
TokenGoKind_LiteralFloat32 = 24,
TokenGoKind_LiteralFloat64 = 25,
TokenGoKind_LiteralString = 26,
TokenGoKind_LiteralStringWide = 27,
TokenGoKind_LiteralStringUTF8 = 28,
TokenGoKind_LiteralStringUTF16 = 29,
TokenGoKind_LiteralStringUTF32 = 30,
TokenGoKind_LiteralStringRaw = 31,
TokenGoKind_LiteralStringWideRaw = 32,
TokenGoKind_LiteralStringUTF8Raw = 33,
TokenGoKind_LiteralStringUTF16Raw = 34,
TokenGoKind_LiteralStringUTF32Raw = 35,
TokenGoKind_LiteralCharacter = 36,
TokenGoKind_LiteralCharacterWide = 37,
TokenGoKind_LiteralCharacterUTF8 = 38,
TokenGoKind_LiteralCharacterUTF16 = 39,
TokenGoKind_LiteralCharacterUTF32 = 40,
TokenGoKind_PPIncludeFile = 41,
TokenGoKind_PPErrorMessage = 42,
TokenGoKind_KeywordGeneric = 43,
TokenGoKind_BraceOp = 44,
TokenGoKind_BraceCl = 45,
TokenGoKind_ParenOp = 46,
TokenGoKind_BrackOp = 47,
TokenGoKind_ParenCl = 48,
TokenGoKind_BrackCl = 49,
TokenGoKind_Semicolon = 50,
TokenGoKind_Colon = 51,
TokenGoKind_DotDotDot = 52,
TokenGoKind_ColonColon = 53,
TokenGoKind_PlusPlus = 54,
TokenGoKind_MinusMinus = 55,
TokenGoKind_Dot = 56,
TokenGoKind_Plus = 57,
TokenGoKind_Minus = 58,
TokenGoKind_Not = 59,
TokenGoKind_Tilde = 60,
TokenGoKind_Star = 61,
TokenGoKind_And = 62,
TokenGoKind_Div = 63,
TokenGoKind_Mod = 64,
TokenGoKind_LeftLeft = 65,
TokenGoKind_RightRight = 66,
TokenGoKind_Less = 67,
TokenGoKind_LessEq = 68,
TokenGoKind_Grtr = 69,
TokenGoKind_GrtrEq = 70,
TokenGoKind_EqEq = 71,
TokenGoKind_NotEq = 72,
TokenGoKind_Xor = 73,
TokenGoKind_Or = 74,
TokenGoKind_AndAnd = 75,
TokenGoKind_OrOr = 76,
TokenGoKind_Ternary = 77,
TokenGoKind_Eq = 78,
TokenGoKind_PlusEq = 79,
TokenGoKind_MinusEq = 80,
TokenGoKind_StarEq = 81,
TokenGoKind_DivEq = 82,
TokenGoKind_ModEq = 83,
TokenGoKind_LeftLeftEq = 84,
TokenGoKind_RightRightEq = 85,
TokenGoKind_Comma = 86,
TokenGoKind_PPStringify = 87,
TokenGoKind_PPConcat = 88,
TokenGoKind_Break = 89,
TokenGoKind_Default = 90,
TokenGoKind_Func = 91,
TokenGoKind_Interface = 92,
TokenGoKind_Select = 93,
TokenGoKind_Case = 94,
TokenGoKind_Defer = 95,
TokenGoKind_Go = 96,
TokenGoKind_Map = 97,
TokenGoKind_Struct = 98,
TokenGoKind_Chan = 99,
TokenGoKind_Else = 100,
TokenGoKind_Goto = 101,
TokenGoKind_Package = 102,
TokenGoKind_Switch = 103,
TokenGoKind_Const = 104,
TokenGoKind_Fallthrough = 105,
TokenGoKind_If = 106,
TokenGoKind_Range = 107,
TokenGoKind_Type = 108,
TokenGoKind_Continue = 109,
TokenGoKind_For = 110,
TokenGoKind_Import = 111,
TokenGoKind_Return = 112,
TokenGoKind_Var = 113,
TokenGoKind_LiteralTrue = 114,
TokenGoKind_LiteralFalse = 115,
TokenGoKind_Identifier = 116,
TokenGoKind_PPInclude = 117,
TokenGoKind_PPVersion = 118,
TokenGoKind_PPDefine = 119,
TokenGoKind_PPUndef = 120,
TokenGoKind_PPIf = 121,
TokenGoKind_PPIfDef = 122,
TokenGoKind_PPIfNDef = 123,
TokenGoKind_PPElse = 124,
TokenGoKind_PPElIf = 125,
TokenGoKind_PPEndIf = 126,
TokenGoKind_PPError = 127,
TokenGoKind_PPImport = 128,
TokenGoKind_PPUsing = 129,
TokenGoKind_PPLine = 130,
TokenGoKind_PPPragma = 131,
TokenGoKind_PPUnknown = 132,
TokenGoKind_PPDefined = 133,
TokenGoKind_COUNT = 134,
};
char *token_go_kind_names[] = {
"EOF",
"Whitespace",
"LexError",
"BlockComment",
"LineComment",
"Backslash",
"LiteralInteger",
"LiteralIntegerU",
"LiteralIntegerL",
"LiteralIntegerUL",
"LiteralIntegerLL",
"LiteralIntegerULL",
"LiteralIntegerHex",
"LiteralIntegerHexU",
"LiteralIntegerHexL",
"LiteralIntegerHexUL",
"LiteralIntegerHexLL",
"LiteralIntegerHexULL",
"LiteralIntegerOct",
"LiteralIntegerOctU",
"LiteralIntegerOctL",
"LiteralIntegerOctUL",
"LiteralIntegerOctLL",
"LiteralIntegerOctULL",
"LiteralFloat32",
"LiteralFloat64",
"LiteralString",
"LiteralStringWide",
"LiteralStringUTF8",
"LiteralStringUTF16",
"LiteralStringUTF32",
"LiteralStringRaw",
"LiteralStringWideRaw",
"LiteralStringUTF8Raw",
"LiteralStringUTF16Raw",
"LiteralStringUTF32Raw",
"LiteralCharacter",
"LiteralCharacterWide",
"LiteralCharacterUTF8",
"LiteralCharacterUTF16",
"LiteralCharacterUTF32",
"PPIncludeFile",
"PPErrorMessage",
"KeywordGeneric",
"BraceOp",
"BraceCl",
"ParenOp",
"BrackOp",
"ParenCl",
"BrackCl",
"Semicolon",
"Colon",
"DotDotDot",
"ColonColon",
"PlusPlus",
"MinusMinus",
"Dot",
"Plus",
"Minus",
"Not",
"Tilde",
"Star",
"And",
"Div",
"Mod",
"LeftLeft",
"RightRight",
"Less",
"LessEq",
"Grtr",
"GrtrEq",
"EqEq",
"NotEq",
"Xor",
"Or",
"AndAnd",
"OrOr",
"Ternary",
"Eq",
"PlusEq",
"MinusEq",
"StarEq",
"DivEq",
"ModEq",
"LeftLeftEq",
"RightRightEq",
"Comma",
"PPStringify",
"PPConcat",
"Break",
"Default",
"Func",
"Interface",
"Select",
"Case",
"Defer",
"Go",
"Map",
"Struct",
"Chan",
"Else",
"Goto",
"Package",
"Switch",
"Const",
"Fallthrough",
"If",
"Range",
"Type",
"Continue",
"For",
"Import",
"Return",
"Var",
"LiteralTrue",
"LiteralFalse",
"Identifier",
"PPInclude",
"PPVersion",
"PPDefine",
"PPUndef",
"PPIf",
"PPIfDef",
"PPIfNDef",
"PPElse",
"PPElIf",
"PPEndIf",
"PPError",
"PPImport",
"PPUsing",
"PPLine",
"PPPragma",
"PPUnknown",
"PPDefined",
};
